#!/usr/bin/env ruby

require "dotenv/load"
require "optparse"
require "yaml"
require_relative "./lib/pwmate"

@options = {}
parser = OptionParser.new do |parser|
  parser.banner = "Usage: pwmate [options] -f FILE"
  parser.on("-f", "--file FILE", "YAML input file") do |file|
    @options[:file] = file
  end
  parser.on("--cloudscale-user USER", "cloudscale.ch user") do |user|
    @options[:cloudscale_user] = user || ENV['CLOUDSCALE_USER']
  end
  parser.on("--cloudscale-password PASSWORD", "cloudscale.ch password") do |password|
    @options[:cloudscale_password] = password || ENV['CLOUDSCALE_PASSWORD']
  end
  parser.on("--cryptopus-user USER", "Cryptopus API user") do |user|
    @options[:cryptopus_user] = user || ENV['CRYPTOPUS_USER']
  end
  parser.on("--cryptopus-token TOKEN", "Cryptopus API token") do |token|
    @options[:cryptopus_token] = token || ENV['CRYPTOPUS_TOKEN']
  end
end

begin
  parser.parse!(ARGV)
  unless @options[:file]
    raise OptionParser::ParseError.new("input file is required")
  end
rescue OptionParser::ParseError => e
  puts e
  puts
  puts parser.help
  exit 1
end

input = YAML.load_file(@options[:file])
input["accounts"].each do |account|
  puts "# Account: #{account["name"]}"
  @current_password = Pwmate.get_current_password(account["secret_stores"].first)
  @new_password = Pwmate.generate_password(32)
  if @current_password && Pwmate.update_account(account, @current_password, @new_password)
    account["secret_stores"].each do |store|
      Pwmate.set_new_password(store, @new_password)  
    end
    puts "# Account updated."
  else
    puts "# Can't update account."
  end
end